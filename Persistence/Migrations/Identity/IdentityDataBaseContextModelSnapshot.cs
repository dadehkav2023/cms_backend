// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Contexts;

namespace Persistence.Migrations.Identity
{
    [DbContext(typeof(IdentityDataBaseContext))]
    partial class IdentityDataBaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Entities.Identity.Role.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "e79c0b86-c84a-4573-8a64-c9c13f240738",
                            DisplayName = "درباره ما",
                            Name = "AboutUs",
                            NormalizedName = "AboutUs"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "d61f250b-4fe7-4634-9f7e-12768a6ac7e4",
                            DisplayName = "تنظیمات",
                            Name = "CmsSetting",
                            NormalizedName = "CmsSetting"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "48c1bf78-0bb6-4d67-9bf4-438f3060e9ce",
                            DisplayName = "تماس با ما",
                            Name = "ContactUs",
                            NormalizedName = "ContactUs"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "2a85caed-67b3-45e3-ba6e-8ac055716e88",
                            DisplayName = "گالری",
                            Name = "Gallery",
                            NormalizedName = "Gallery"
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = "9fa8101c-03a6-4dcf-a974-3872e033d960",
                            DisplayName = "منو",
                            Name = "Menu",
                            NormalizedName = "Menu"
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyStamp = "30521ab5-6940-49e0-a5c0-63a45aa47ab3",
                            DisplayName = "اسلایدر",
                            Name = "Slider",
                            NormalizedName = "Slider"
                        },
                        new
                        {
                            Id = 7,
                            ConcurrencyStamp = "e6dfd75a-c93e-4421-aa82-dc7c6a7da2ce",
                            DisplayName = "میز خدمت",
                            Name = "ServiceDesk",
                            NormalizedName = "ServiceDesk"
                        },
                        new
                        {
                            Id = 8,
                            ConcurrencyStamp = "f2f7519d-cb06-41d5-99ac-83faddc5c53f",
                            DisplayName = "اطلاعیه",
                            Name = "Notification",
                            NormalizedName = "Notification"
                        },
                        new
                        {
                            Id = 9,
                            ConcurrencyStamp = "c410bbd6-080d-41d0-9359-ff99ca43ca0f",
                            DisplayName = "بیانیه",
                            Name = "Statement",
                            NormalizedName = "Statement"
                        },
                        new
                        {
                            Id = 10,
                            ConcurrencyStamp = "09eb89a9-d5e1-4e4b-913a-f1ec74995037",
                            DisplayName = "دسترسی سریع",
                            Name = "QuickAccess",
                            NormalizedName = "QuickAccess"
                        },
                        new
                        {
                            Id = 11,
                            ConcurrencyStamp = "9445778e-983c-47f5-9cb6-9af91754dcd7",
                            DisplayName = "لینک مرتبط",
                            Name = "RelatedLink",
                            NormalizedName = "RelatedLink"
                        },
                        new
                        {
                            Id = 12,
                            ConcurrencyStamp = "61de7763-ec8f-4018-a450-8f2bd968e0bd",
                            DisplayName = "خبر متنی",
                            Name = "TextNews",
                            NormalizedName = "TextNews"
                        },
                        new
                        {
                            Id = 13,
                            ConcurrencyStamp = "f7bcdbcd-8ed0-4e7d-8268-2daf4f612dd7",
                            DisplayName = "خبر تصویری",
                            Name = "ImageNews",
                            NormalizedName = "ImageNews"
                        },
                        new
                        {
                            Id = 14,
                            ConcurrencyStamp = "c3ced2b8-2584-4830-ac06-c17f322c2cee",
                            DisplayName = "خبر ویدئویی",
                            Name = "VideoNews",
                            NormalizedName = "VideoNews"
                        },
                        new
                        {
                            Id = 15,
                            ConcurrencyStamp = "f6e464d8-a513-43cd-a2e0-db305ef14f19",
                            DisplayName = "مدیریت کاربران",
                            Name = "UserManagement",
                            NormalizedName = "UserManagement"
                        },
                        new
                        {
                            Id = 16,
                            ConcurrencyStamp = "4ee8338a-1a9c-4d83-9e44-096ab1b635f1",
                            DisplayName = "مدیریت استان",
                            Name = "Province",
                            NormalizedName = "Province"
                        },
                        new
                        {
                            Id = 17,
                            ConcurrencyStamp = "931dca40-7939-4bc2-aea3-c3250c8f63a0",
                            DisplayName = "مدیریت کارزار",
                            Name = "Karzar",
                            NormalizedName = "Karzar"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Identity.User.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Domain.Entities.Identity.Role.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Domain.Entities.Identity.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Domain.Entities.Identity.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Domain.Entities.Identity.Role.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Identity.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Domain.Entities.Identity.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
