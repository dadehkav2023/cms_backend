// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Contexts;

namespace Persistence.Migrations.identity
{
    [DbContext(typeof(IdentityDataBaseContext))]
    [Migration("20250830102313_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Entities.Identity.Role.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "f5f8daaf-df7c-44fa-90d9-bf0d5ee94ca0",
                            DisplayName = "درباره ما",
                            Name = "AboutUs",
                            NormalizedName = "AboutUs"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "09ab319a-8258-4756-8a76-7f7a744b358d",
                            DisplayName = "تنظیمات",
                            Name = "CmsSetting",
                            NormalizedName = "CmsSetting"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "c333ba9e-37c5-44a7-8d3f-a20015b85373",
                            DisplayName = "تماس با ما",
                            Name = "ContactUs",
                            NormalizedName = "ContactUs"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "f99a355d-1fed-4575-b7c6-5971e68d44a2",
                            DisplayName = "گالری",
                            Name = "Gallery",
                            NormalizedName = "Gallery"
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = "b9f25c6d-5aeb-4452-8ff3-d34317d7901e",
                            DisplayName = "منو",
                            Name = "Menu",
                            NormalizedName = "Menu"
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyStamp = "8df80d18-2782-4d01-b4ed-f4c240f1fdbd",
                            DisplayName = "اسلایدر",
                            Name = "Slider",
                            NormalizedName = "Slider"
                        },
                        new
                        {
                            Id = 7,
                            ConcurrencyStamp = "065b37ef-58fe-4c0c-8d71-04dad0d5cf52",
                            DisplayName = "میز خدمت",
                            Name = "ServiceDesk",
                            NormalizedName = "ServiceDesk"
                        },
                        new
                        {
                            Id = 8,
                            ConcurrencyStamp = "acd60758-1896-4ba8-aa50-75d8adaf19b3",
                            DisplayName = "اطلاعیه",
                            Name = "Notification",
                            NormalizedName = "Notification"
                        },
                        new
                        {
                            Id = 9,
                            ConcurrencyStamp = "f046c758-d777-4ec4-82ab-034a757fc74e",
                            DisplayName = "بیانیه",
                            Name = "Statement",
                            NormalizedName = "Statement"
                        },
                        new
                        {
                            Id = 10,
                            ConcurrencyStamp = "f80586f3-cc56-4e9a-a8b6-b08a0eeae415",
                            DisplayName = "دسترسی سریع",
                            Name = "QuickAccess",
                            NormalizedName = "QuickAccess"
                        },
                        new
                        {
                            Id = 11,
                            ConcurrencyStamp = "02484778-6b63-4181-9c25-8d0d8436271a",
                            DisplayName = "لینک مرتبط",
                            Name = "RelatedLink",
                            NormalizedName = "RelatedLink"
                        },
                        new
                        {
                            Id = 12,
                            ConcurrencyStamp = "898ede97-e001-4576-a8c4-ca245f768bd9",
                            DisplayName = "خبر متنی",
                            Name = "TextNews",
                            NormalizedName = "TextNews"
                        },
                        new
                        {
                            Id = 13,
                            ConcurrencyStamp = "9b2d42e9-39f1-45f7-8947-15551f2afee4",
                            DisplayName = "خبر تصویری",
                            Name = "ImageNews",
                            NormalizedName = "ImageNews"
                        },
                        new
                        {
                            Id = 14,
                            ConcurrencyStamp = "96a077c6-8c63-45c6-afbf-d5cead3f4575",
                            DisplayName = "خبر ویدئویی",
                            Name = "VideoNews",
                            NormalizedName = "VideoNews"
                        },
                        new
                        {
                            Id = 15,
                            ConcurrencyStamp = "542eda7c-95c3-47df-91ee-85adc37cc02b",
                            DisplayName = "مدیریت کاربران",
                            Name = "UserManagement",
                            NormalizedName = "UserManagement"
                        },
                        new
                        {
                            Id = 16,
                            ConcurrencyStamp = "3fff473e-f496-4c16-b2ba-295c426de79e",
                            DisplayName = "مدیریت استان",
                            Name = "Province",
                            NormalizedName = "Province"
                        },
                        new
                        {
                            Id = 17,
                            ConcurrencyStamp = "33de6566-118b-4b8c-892d-72a4e91608f6",
                            DisplayName = "مدیریت کارزار",
                            Name = "Karzar",
                            NormalizedName = "Karzar"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Identity.User.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Domain.Entities.Identity.Role.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Domain.Entities.Identity.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Domain.Entities.Identity.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Domain.Entities.Identity.Role.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Identity.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Domain.Entities.Identity.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
